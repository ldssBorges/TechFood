#!/bin/bash

# Script de valida√ß√£o do deployment Kubernetes

echo "üîç Validando deployment do TechFood no Kubernetes..."

# Cores para output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

# Fun√ß√£o para logs coloridos
log_success() {
    echo -e "${GREEN}‚úÖ $1${NC}"
}

log_error() {
    echo -e "${RED}‚ùå $1${NC}"
}

log_warning() {
    echo -e "${YELLOW}‚ö†Ô∏è $1${NC}"
}

log_info() {
    echo -e "‚ÑπÔ∏è $1"
}

# Contador de erros
ERRORS=0

# Verificar se o kubectl est√° funcionando
if ! kubectl cluster-info &> /dev/null; then
    log_error "Cluster Kubernetes n√£o est√° dispon√≠vel"
    exit 1
fi

log_success "Cluster Kubernetes est√° dispon√≠vel"

# Verificar se o namespace existe
if kubectl get namespace techfood &> /dev/null; then
    log_success "Namespace 'techfood' existe"
else
    log_error "Namespace 'techfood' n√£o encontrado"
    ((ERRORS++))
fi

# Verificar pods
echo ""
log_info "Verificando status dos pods..."
PODS=$(kubectl get pods -n techfood --no-headers 2>/dev/null | wc -l)

if [ $PODS -eq 0 ]; then
    log_error "Nenhum pod encontrado no namespace techfood"
    ((ERRORS++))
else
    log_success "Encontrados $PODS pods no namespace techfood"
    
    # Verificar se todos os pods est√£o rodando
    NOT_RUNNING=$(kubectl get pods -n techfood --no-headers 2>/dev/null | grep -v "Running" | wc -l)
    
    if [ $NOT_RUNNING -eq 0 ]; then
        log_success "Todos os pods est√£o rodando"
    else
        log_warning "$NOT_RUNNING pods n√£o est√£o rodando"
        kubectl get pods -n techfood | grep -v "Running"
    fi
fi

# Verificar services
echo ""
log_info "Verificando services..."
SERVICES=$(kubectl get services -n techfood --no-headers 2>/dev/null | wc -l)

if [ $SERVICES -eq 0 ]; then
    log_error "Nenhum service encontrado"
    ((ERRORS++))
else
    log_success "Encontrados $SERVICES services"
fi

# Verificar deployments
echo ""
log_info "Verificando deployments..."
DEPLOYMENTS=$(kubectl get deployments -n techfood --no-headers 2>/dev/null | wc -l)

if [ $DEPLOYMENTS -eq 0 ]; then
    log_error "Nenhum deployment encontrado"
    ((ERRORS++))
else
    log_success "Encontrados $DEPLOYMENTS deployments"
    
    # Verificar se todos os deployments est√£o prontos
    NOT_READY=$(kubectl get deployments -n techfood --no-headers 2>/dev/null | awk '$2 != $3 { print $1 }')
    
    if [ -z "$NOT_READY" ]; then
        log_success "Todos os deployments est√£o prontos"
    else
        log_warning "Deployments n√£o prontos: $NOT_READY"
    fi
fi

# Verificar HPA
echo ""
log_info "Verificando HPA..."
HPAS=$(kubectl get hpa -n techfood --no-headers 2>/dev/null | wc -l)

if [ $HPAS -eq 0 ]; then
    log_warning "Nenhum HPA encontrado"
else
    log_success "Encontrados $HPAS HPAs"
fi

# Verificar PVCs
echo ""
log_info "Verificando PVCs..."
PVCS=$(kubectl get pvc -n techfood --no-headers 2>/dev/null | wc -l)

if [ $PVCS -eq 0 ]; then
    log_warning "Nenhum PVC encontrado"
else
    log_success "Encontrados $PVCS PVCs"
    
    # Verificar se PVCs est√£o bound
    NOT_BOUND=$(kubectl get pvc -n techfood --no-headers 2>/dev/null | grep -v "Bound" | wc -l)
    
    if [ $NOT_BOUND -eq 0 ]; then
        log_success "Todos os PVCs est√£o bound"
    else
        log_warning "$NOT_BOUND PVCs n√£o est√£o bound"
    fi
fi

# Verificar se a aplica√ß√£o est√° acess√≠vel
echo ""
log_info "Verificando conectividade da aplica√ß√£o..."

# Obter a URL do servi√ßo
SERVICE_URL=$(minikube service techfood-nginx-service -n techfood --url 2>/dev/null)

if [ -z "$SERVICE_URL" ]; then
    log_error "N√£o foi poss√≠vel obter a URL do servi√ßo"
    ((ERRORS++))
else
    log_success "URL do servi√ßo: $SERVICE_URL"
    
    # Testar conectividade
    if curl -s "$SERVICE_URL/health" > /dev/null; then
        log_success "Aplica√ß√£o est√° respondendo"
    else
        log_warning "Aplica√ß√£o n√£o est√° respondendo em /health"
    fi
fi

# Resumo final
echo ""
echo "=================== RESUMO ==================="
if [ $ERRORS -eq 0 ]; then
    log_success "Valida√ß√£o conclu√≠da com sucesso!"
    echo ""
    echo "üåê Para acessar a aplica√ß√£o:"
    echo "   minikube service techfood-nginx-service -n techfood"
    echo ""
    echo "üìä Para monitorar:"
    echo "   kubectl get pods -n techfood -w"
    echo "   kubectl get hpa -n techfood -w"
else
    log_error "Valida√ß√£o falhou com $ERRORS erros"
    echo ""
    echo "üîç Para diagnosticar:"
    echo "   kubectl get all -n techfood"
    echo "   kubectl describe pod <pod-name> -n techfood"
    echo "   kubectl logs <pod-name> -n techfood"
fi
echo "=============================================="
